Muistiinpanot:

Osa-1:

a. Reactin alkeet

React-sovelluksen luominen: npx create-react-app <nimi>
Sovelluksen käynnistäminen: npm start


Osa-2:

c. Palvelimella olevan datan hakeminen

- Promisella on kolme mahdollista tilaa: Pending, fullfilled/resolved ja rejected

- Serveri voidaan käynnistää komennolla: npx json-server --port=3001 --watch db.json

e. Tyylien lisääminen React-sovellukseen

const [notes, setNotes] =useState([]) tarkoittaa, että muuttuja notes alustetaan tyhjällä taulukolla. Myöhemmin koodissa kutsutaan notes.map() -metodi, joka voidaan kutsua tyhjälle taulukolle.
Jos [] tilalla olisi ollut alustuksessa arvo null, tulisi virhetila, koska metodia map ei voi kutsua sille.

Effect hook:

useEffect(() => {
noteService
    .getAll()
    .then(initialNotes => {
    setNotes(initialNotes)  
    })
}, [])

 - Tyhjä taulukko [] lopussa tarkentaa miten usein efekti suoritetaan. Kun toisena parametrina on tyhjä taulukko [], sen sisältö ei koskaan muutu ja efekti suoritetaan ainoastaan komponentin ensimmäisen renderöinnin jälkeen.

Lomakkeen luominen:

<form>
    find countries <input type="text" />
</form>

- Lomakkeen luominen vaatii sekä form että input osiot

Aaltosulut {}: Käytetään kun on dynaamisia arvoja tai JavaScript expressioneita. Käytetään esimerkiksi laskuihin tai ehdolliseen renderöintiin.

Esimerkkejä:

{variableName}
{1 + 2}

Sulut (): Käytetään ryhmittelemään useita JSX elementtejä tai komponentteja yhteen.

Os-3

a. Node.js ja expressioneita

- Express on ohjelmointirajapinnan tarjoava kirjasto

- Projektin riippuvuudet päivitetään komennolla npm update

- npm init luo rungon projektille

- Selaimen puolella käytetään (nykyään) ES6:n moduuleita, eli moduulit määritellään exportilla ja otetaan käyttöön importilla.
Node.js kuitenkin käyttää ns. CommonJS-moduuleja. Syy tälle on siinä, että Node-ekosysteemillä oli tarve moduuleihin jo kauan ennen kuin JavaScript tuki moduuleja kielen tasolla.

- Javascriptissa yhtäsuuruusmerkki on === eli kolme kertaa =
- Vastaavasti epäsuuruus on !==

- HTTP-pyyntötyyppien ominaisuudet safe ja idempotent: 
- Safe: get tulisi olla safe, tarkoittaa että ei esim. muuta tietokannan tilaa, palauttaa vain datan
- Idempotent: kaikkien muiden paitsi POST-pyyntöjen tulisi olla idempotent, tarkoittaa että kun suoritetaan monta kertaa, sisältö pysyy samana

- Kirjastot asennetaan npm install <kirjaton nimi>