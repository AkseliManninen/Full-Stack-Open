Muistiinpanot:

Kurssilla opittu stäkki:
- Frotnedn: React
- Backend: Node.js v18.13.02
- Tietokanta: MongoDB

Osa-1:

a. Reactin alkeet

React-sovelluksen luominen: npx create-react-app <nimi>
Sovelluksen käynnistäminen: npm start


Osa-2:

c. Palvelimella olevan datan hakeminen

- Promisella on kolme mahdollista tilaa: Pending, fullfilled/resolved ja rejected

- Serveri voidaan käynnistää komennolla: npx json-server --port=3001 --watch db.json

e. Tyylien lisääminen React-sovellukseen

const [notes, setNotes] =useState([]) tarkoittaa, että muuttuja notes alustetaan tyhjällä taulukolla. Myöhemmin koodissa kutsutaan notes.map() -metodi, joka voidaan kutsua tyhjälle taulukolle.
Jos [] tilalla olisi ollut alustuksessa arvo null, tulisi virhetila, koska metodia map ei voi kutsua sille.

Effect hook:

useEffect(() => {
noteService
    .getAll()
    .then(initialNotes => {
    setNotes(initialNotes)  
    })
}, [])

 - Tyhjä taulukko [] lopussa tarkentaa miten usein efekti suoritetaan. Kun toisena parametrina on tyhjä taulukko [], sen sisältö ei koskaan muutu ja efekti suoritetaan ainoastaan komponentin ensimmäisen renderöinnin jälkeen.

Lomakkeen luominen:

<form>
    find countries <input type="text" />
</form>

- Lomakkeen luominen vaatii sekä form että input osiot

Aaltosulut {}: Käytetään kun on dynaamisia arvoja tai JavaScript expressioneita. Käytetään esimerkiksi laskuihin tai ehdolliseen renderöintiin.

Esimerkkejä:

{variableName}
{1 + 2}

Sulut (): Käytetään ryhmittelemään useita JSX elementtejä tai komponentteja yhteen.

Os-3

a. Node.js ja expressioneita

- Express on ohjelmointirajapinnan tarjoava kirjasto

- Projektin riippuvuudet päivitetään komennolla npm update

- npm init luo rungon projektille

- Selaimen puolella käytetään (nykyään) ES6:n moduuleita, eli moduulit määritellään exportilla ja otetaan käyttöön importilla.
Node.js kuitenkin käyttää ns. CommonJS-moduuleja. Syy tälle on siinä, että Node-ekosysteemillä oli tarve moduuleihin jo kauan ennen kuin JavaScript tuki moduuleja kielen tasolla.

- Javascriptissa yhtäsuuruusmerkki on === eli kolme kertaa =
- Vastaavasti epäsuuruus on !==

- HTTP-pyyntötyyppien ominaisuudet safe ja idempotent: 
- Safe: get tulisi olla safe, tarkoittaa että ei esim. muuta tietokannan tilaa, palauttaa vain datan
- Idempotent: kaikkien muiden paitsi POST-pyyntöjen tulisi olla idempotent, tarkoittaa että kun suoritetaan monta kertaa, sisältö pysyy samana

- Kirjastot asennetaan npm install <kirjaton nimi>

b. Sovellus internettiin

- CORS eli Cross-origin resource sharing: Oletusarvoisesti websovellus saa kommunikoida vain samassa originissa olevan palvelimen kanssa

- PaaS ratkaisujen ykkönen on ollut pitkään Heroku, jossa voi asentaa suoritusympäristön ja tietokanna

c. Tietojen tallentaminen MongoDB-tietokantaan

- Middlewaret suoritetaan siinä järjestyksessä, kun ne on otettu käyttöön app.use()-komentoa käyttäen

d. Validointi ja ESLint

- Generically, lint or a linter is any tool that detects and flags errors in programming languages, including stylistic errors. The term lint-like behavior is sometimes applied to the process of flagging suspicious language usage. Lint-like tools generally perform static analysis of source code.

- Lint voidaan ajaa npm run lint

- Jos haluaa korjata virheet tiedostossa, niin npm run lint -- --fix <file name>

- Tiedostojen ajaminen: Frontend npm start, backend node index.js

Osa-4

a. Sovelluksen rakenne ja testauksen alkeet

- Kyse on backendistä, joten projekti aloitettiin npm init -komennolla
- Tarvitsi asentaa seuraavat middleware npm install cors, mongoose, express, http, dotenv
- npm install --save-dev nodemon auttaa siinä, että ohjelma käynnistyy sulavammin
- applikaation saa yhdistettyä tietokantaan laittamalla, npm start <salasana>

- Testauskirjaston Jest asennus: npm install --save-dev jest

- Yksittäisiä testejä on mahdollista suorittaa only, tai npm test -- -t <"test description"> tavoilla

- Testitidoston tulee loppua .test.js

- Testit voi ajaa komennolla npm test, jos on laittanut package.json tiedostoo "test": "jest --verbose",

b. Backendin testaaminen
- Async- ja await ovat ES7:n mukanaan tuoma uusi syntaksi, joka mahdollistaa promisen palauttavien asynkronisten funktioiden kutsumisen siten, että kirjoitettava koodi näyttää synkroniselta.
- Awaitin käyttö onnistuu ainoastaan jos ollaan async-funktiossa.
- Synkroninen tarkoittaa, että prosessi suoritetaan järjestyksessä. Asyknroninen että voidaan thedä samaan aikaan.
- Testeissä --runInBand estää testien samanaikaisen suorittamisen
- Asenna cross-env suorituksen aikaiseksi riippuvuudeksi npm install --save-dev cross-env
- npm install --save-dev supertest, SuperTest on toinen (APIn) testikirjasto Jestin ohella

c. Käyttäjienhallinta
- MondoDB on dokumenttitietokanta
- Skeemaa ei tarvitse määritellä kuin relaatiotiotokannassa: Viiteavaimet voivat olla käyttäjien ja muistiinpanojen tapauksissa kummassa tahansa "taulussa" tai molemmissa.
- mongoose-unique-validatorilla voi tarkistaa, onko kentän arvo uniikki

Osa-5

a. Kirjautuminen frontendissa

- Git-konfiguraation poistaminen: rm -fr .git
- Viten käynnistys portissa 3003: npm start -- --port 3003
- Pitää käynnistää sekä frontend että backend erikseen npm start komennolla

b. props.children ja proptypet

c. React-sovellusten testaaminen

- Testaamiseen käytetään FB:n Jest-kirjastoa sekä React Testin Library
- Testauskattavuus: npm test -- --coverage --collectCoverageFrom='src/**/*.{jsx,js}'

d. End to end -testaus
- E2E-testausta tehdään kirjaston avulla esim. Selenium tai selaimessa Headless-moodissa
- Backendin avaaminen testimoodissa npm run start:test --port 3003
- Frontend avataan testeissä portissa 5173 käyttäen deviä. npm run dev --port 5173

Sanastoa:

- Middleware
- Moduuli
- Skeema: 
- Metodi:

